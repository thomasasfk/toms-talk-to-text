name: CI/CD

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build executable
      run: pyinstaller --onefile --icon=icon.ico --add-data "icon.ico;." --noconsole -n=tttt main.py
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tttt
        path: ./dist/tttt.exe

  release:
    needs: build
    if: github.event_name == 'workflow_dispatch'
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: tttt
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install semver
    - name: Determine next version
      id: next_version
      run: |
        $latest_tag = git describe --tags --abbrev=0 2>$null
        if (-not $latest_tag) {
          $latest_tag = "v0.0.0"
        }
        $latest_version = $latest_tag -replace '^v', ''
        $new_version = python -c "import semver; print(str(semver.VersionInfo.parse('$latest_version').bump_${{ github.event.inputs.release_type }}()))"
        echo "new_version=$new_version" >> $env:GITHUB_OUTPUT
      shell: pwsh
    - name: Create and push tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag v${{ steps.next_version.outputs.new_version }}
        git push origin v${{ steps.next_version.outputs.new_version }}
      shell: pwsh
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create v${{ steps.next_version.outputs.new_version }} `
          --title "Release v${{ steps.next_version.outputs.new_version }}" `
          --notes "Release notes for version ${{ steps.next_version.outputs.new_version }}" `
          ./tttt.exe
      shell: pwsh